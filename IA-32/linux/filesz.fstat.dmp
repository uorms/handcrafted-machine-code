# EH
7F 45 4C 46
01 01 01 00
00 00 00 00
00 00 00 00
02 00
03 00
01 00 00 00
54 80 04 08
34 00 00 00
00 00 00 00
00 00 00 00
34 00
20 00
01 00
28 00
00 00
00 00

# PH
01 00 00 00
54 00 00 00
54 80 04 08
00 00 00 00
80 00 00 00
80 00 00 00
05 00 00 00
00 00 00 00

# ENTRY
# open file using filepath provided as arg
55              # push ebp
89 E5           # mov ebp, esp
8B 5D 0C        # mov ebx, [ebp+12]
B8 05 00 00 00  # mov eax, 5
B9 00 00 00 00  # mov ecx, O_RDONLY
CD 80

# save fd
50              # push eax

# alloc
B8 C0 00 00 00
BB 00 00 00 00
B9 00 10 00 00
BA 03 00 00 00
BE 22 00 00 00
BF FF FF FF FF
BD 00 00 00 00
CD 80

50              # push eax

# fstat (obsolete)
89 E7              # mov edi, rsp
B8 6C 00 00 00     # mov eax, fstat
8B 5F 04           # mov ebx, [edi+4]
8B 0F              # mov ecx, [edi]
CD 80


59                # pop ecx
89 CF             # mov edi, ecx
83 C1 7F          # add ecx, 127
8B 47 14          # mov eax, [edi+20]
31 FF             # xor edi, edi
47                # inc edi
C7 01 0A 00 00 00 # mov [ecx], 0x0A


# @get digits lsd (least significant digits)
BA 00 00 00 00  # mov edx, 0  (high)
50              # push eax
83 E8 0A        # sub eax, -10
78 17           # js @get digits msd
58              # pop eax
51              # push ecx
B9 0A 00 00 00  # mov ecx, 10
F7 F1           # div 10  (eax = quotient; edx = remainder)
59              # pop ecx
83 C2 30        # add edx, 30
51              # push ecx
01 F9           # add ecx, edi
89 51 00        # mov [ecx+0], edx
59              # pop ecx
47              # inc edi
EB DE           # jmp @get digits lsd

# @get digits msd (most significant digit)
58              # pop eax
83 C0 30        # add eax, 30
51              # push ecx
01 F9           # add ecx, edi
89 01           # mov [ecx], eax
59              # pop ecx


# @print digits
B8 04 00 00 00   # mov eax, 4
BB 01 00 00 00   # mov ebx, 1
BA 01 00 00 00   # mov edx, 1
51               # push ecx
01 F9            # add ecx, edi
CD 80            # int 0x80
59               # pop ecx
83 F7 00         # xor edi, 0
74 03            # jz @exit
4F               # dec edi
EB E3            # jmp @print digits

58               # pop eax
5D               # pop ebp

# exit
B8 01 00 00 00
BB 00 00 00 00
CD 80

